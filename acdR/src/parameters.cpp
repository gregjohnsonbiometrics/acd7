// Parameter estimates and species data
//
// G.P. Johnson
// Greg Johnson Biometrics LLC
// (c) 2024
//

#include <iostream>
#include "parameters.hpp"

// species map
// key: FIA species code
const std::unordered_map<int,SPP_ID> species_map = {{ 
{ 531, {  0, "AB", false, "American Beech" }},
{ 972, {  1, "AE", false, "American Elm" }},
{ 391, {  2, "AH", false, "American Hornbeam, Musclewood" }},
{ 341, {  3, "AI", false, "Ailanthus" }},
{ 350, {  4, "AL", false, "Alder Spp." }},
{ 660, {  5, "AP", false, "Apple Spp." }},
{ 540, { 65, "AS", false, "Ash" }},
{  43, {  6, "AW", true,  "Atlantic White-cedar" }},
{ 543, {  7, "BA", false, "Black Ash" }},
{ 370, { -1, "BB", false, "Birch Spp."}},
{ 762, {  8, "BC", false, "Black Cherry" }},
{ 313, {  9, "BE", false, "Boxelder" }},
{  12, { 10, "BF", true,  "Balsam Fir" }},
{ 402, { 11, "BH", false, "Bitternut Hickory" }}, 
{ 693, { -1, "BG", false, "Blackgum" }},
{ 901, { -1, "BK", false, "Black Locust" }},
{ 922, { 66, "BL", false, "Black Willow" }},
{ 314, { -1, "BM", false, "Black Maple" }},
{ 601, { 12, "BN", false, "Butternut" }},
{ 837, { 13, "BO", false, "Black Oak" }},
{ 741, { 14, "BP", false, "Balsam Poplar" }},
{ 823, { 15, "BR", false, "Bur Oak" }},
{  95, { 16, "BS", true,  "Black Spruce" }},
{ 743, { 17, "BT", false, "Bigtooth Aspen" }},
{ 330, { -1, "BU", false, "Buckeye, Horsechestnut spp." }},
{ 951, { 18, "BW", false, "American Basswood" }},
{ 813, { -1, "CB", false, "Cherrybark Oak" }},
{ 763, { 19, "CC", false, "Chokecherry" }},
{ 826, { -1, "CK", false, "Chinkapin Oak" }},
{ 832, { -1, "CO", false, "Chestnut Oak" }},
{ 651, { -1, "CT", false, "Cucumbertree" }},
{ 491, { 20, "DW", false, "Flowering Dogwood" }},
{ 742, { 21, "EC", false, "Eastern Cottonwood" }},
{ 261, { 22, "EH", true,  "Eastern Hemlock" }},
{ 970, { 70, "EL", false, "Elm Spp." }},
{ 544, { 23, "GA", false, "Green Ash" }},
{ 379, { 24, "GB", false, "Gray Birch" }},
{ 701, { 25, "HH", false, "Eastern Hophornbeam" }},
{ 400, { -1, "HI", false, "Hickory Spp." }},
{ 462, { -1, "HK", false, "Hackberry" }},
{ 260, { -1, "HM", true,  "Hemlock Spp." }},
{ 500, { 26, "HT", false, "Hawthorn Spp." }},
{ 591, { -1, "HY", false, "American Holly" }},
{ 105, { 27, "JP", true,  "Jack Pine" }},
{  57, { -1, "JU", true,  "Juniper Spp." }},
{ 131, { -1, "LP", true,  "Loblolly Pine" }},
{ 935, { 28, "MA", false, "Mountain Ash" }},
{ 650, { -1, "MG", false, "Magnolia Spp." }},
{ 409, { -1, "MH", false, "Mockernut Hickory" }},
{ 319, { 29, "MM", false, "Mountain Maple" }},
{ 653, { -1, "MV", false, "Sweetbay" }},
{ 320, { 30, "NM", false, "Norway Maple" }},
{  91, { 31, "NS", true,  "Norway Spruce" }},
{ 998, { -1, "OH", false, "Unknown Dead Hardwood" }},
{ 800, { -1, "OK", false, "Oak Spp." }},
{ 641, { -1, "OO", false, "Osage-orange" }},
{ 100, { -1, "OP", true,  "Pine Spp." }},
{ 299, { -1, "OS", true,  "Unknown Dead Conifer?" }},
{ 545, { -1, "PA", false, "Pumpkin Ash" }},
{ 375, { 32, "PB", false, "Paper Birch" }},
{ 128, { -1, "PD", true,  "Pond Pine" }},
{ 403, { -1, "PH", false, "Pignut Hickory" }},
{  90, { -1, "PI", true,  "Spruce Spp." }},
{ 760, { -1, "PL", false, "Cherry and Plum Spp." }},
{ 830, { -1, "PN", false, "Pin Oak" }},
{ 835, { -1, "PO", false, "Post Oak" }},
{ 126, { 33, "PP", true,  "Pitch Pine" }},
{ 761, { 34, "PR", false, "Pin Cherry" }},
{ 521, { -1, "PS", false, "Common Persimmon" }},
{ 712, { -1, "PW", false, "Paulownia, Empress-tree" }},
{ 744, { 35, "PY", false, "Swamp Cottonwood" }}, ///////////////
{ 746, { 36, "QA", false, "Quaking Aspen" }},
{ 817, { -1, "QI", false, "Shingle Oak" }},
{ 373, { 64, "RB", false, "River Birch" }},
{  68, { -1, "RC", true,  "Eastern Redcedar" }},
{ 975, { -1, "RL", false, "Slippery Elm" }},
{ 316, { 37, "RM", false, "Red Maple" }},
{ 125, { 38, "RN", true,  "Red Pine" }},
{ 833, { 39, "RO", false, "Red Oak" }},
{ 125, { 67, "RP", true,  "Red Pine 2"}},
{  97, { 40, "RS", true,  "Red Spruce" }},
{ 372, { 41, "SB", false, "Sweet Birch" }},
{ 130, { 42, "SC", true,  "Scotch Pine" }},
{ 711, { -1, "SD", false, "Sourwood" }},
{ 356, { 43, "SE", false, "Serviceberry Spp." }},
{ 407, { 44, "SH", false, "Shagbark Hickory" }},
{ 812, { -1, "SK", false, "Southern Red Oak" }},
{ 405, { -1, "SL", false, "Shellbark Hickory" }},
{ 318, { 45, "SM", false, "Sugar Maple" }},
{ 825, { -1, "SN", false, "Swamp Chestnut Oak" }},
{ 806, { 46, "SO", false, "Scarlet Oak" }},
{ 110, { -1, "SP", true,  "Shortleaf Pine" }},
{ 931, { -1, "SS", false, "Sassafras" }},
{ 315, { 47, "ST", false, "Striped Maple" }},
{ 611, { -1, "SU", false, "Sweetgum" }},
{ 317, { 48, "SV", false, "Silver Maple" }},
{ 804, { 49, "SW", false, "Swamp White Oak" }},
{ 731, { 50, "SY", false, "American Sycamore" }},
{  71, { 51, "TA", true,  "Tamarach/Larch" }},
{ 123, { 52, "TM", true,  "Table Mountain Pine" }},
{ 132, { -1, "VP", true,  "Virginia Pine" }},
{ 541, { 53, "WA", false, "White Ash" }},
{ 952, { -1, "WB", false, "White Basswood" }},
{ 241, { 54, "WC", true,  "Northern White Cedar" }},
{ 920, { 55, "WI", false, "Willow Spp." }},
{ 827, { 68, "WK", false, "Water Oak" }},
{ 831, { 69, "WL", false, "Willow Oak" }},
{ 602, { -1, "WN", false, "Black Walnut" }},
{ 802, { 56, "WO", false, "White Oak" }},
{ 129, { 57, "WP", true,  "White Pine" }},
{ 374, { -1, "WR", false, "Water Birch" }},
{  94, { 58, "WS", true,  "White Spruce" }},
{ 691, { -1, "WT", false, "Water Tupelo" }},
{ 371, { 59, "YB", false, "Yellow Birch" }},
{ 621, { 60, "YP", false, "Yellow Poplar" }},
{ 332, { -1, "YY", false, "Yellow Buckeye" }},
{ 999, { 61, "99", false, "Other Unknown" }},
{ 9990, { 62, "OH", false, "Other Hardwood" }},
{ 9991, { 63, "OS", false, "Other Softwood" }}
}};

// species crosswalk
// key: FIA species code
const std::unordered_map<int, SPP_CROSSWALK> species_crosswalk = {{
	{ 10, { "FR", 12 } },    
	{ 12, { "BF", 12 } },    
	{ 16, { "  ", 12 } },    
	{ 40, { "  ", 43 } },    
	{ 43, { "AW", 43 } },    
	{ 50, { "  ", 241 } },   
	{ 51, { "  ", 241 } },   
	{ 57, { "JU", 57 } },    
	{ 58, { "  ", 57 } },    
	{ 59, { "  ", 57 } },    
	{ 61, { "  ", 57 } },    
	{ 63, { "  ", 57 } },    
	{ 66, { "  ", 57 } },    
	{ 67, { "  ", 68 } },    
	{ 68, { "RC", 68 } },    
	{ 70, { "  ", 71 } },    
	{ 71, { "TA", 71 } },    
	{ 90, { "PI", 90 } },    
	{ 91, { "NS", 9990 } },  
	{ 94, { "WS", 94 } },    
	{ 95, { "BS", 95 } },  
	{ 96, { "  ", 95 } },  
	{ 97, { "RS", 97 } },    
	{ 100, { "OP", 100 } },  
	{ 105, { "JP", 105 } },  
	{ 107, { "PU", 100 } },  
	{ 110, { "SP", 110 } },  
	{ 111, { "SA", 131 } },  
	{ 114, { "  ", 129 } },  
	{ 115, { "SR", 110 } },  
	{ 121, { "LL", 131 } },  
	{ 123, { "TM", 123 } },  
	{ 125, { "RN", 125 } },  
	{ 126, { "PP", 126 } },  
	{ 128, { "PD", 128 } },  
	{ 129, { "WP", 129 } },  
	{ 130, { "SC", 130 } },  
	{ 131, { "LP", 131 } },  
	{ 132, { "VP", 132 } },  
	{ 136, { "  ", 125 } },  
	{ 144, { "  ", 100 } },  
	{ 220, { "  ", 241 } },  
	{ 221, { "BY", 241 } },  
	{ 222, { "PC", 241 } },  
	{ 230, { "  ", 9991 } }, 
	{ 232, { "  ", 9991 } }, 
	{ 240, { "OC", 241 } },  
	{ 241, { "WC", 241 } },  
	{ 260, { "HM", 260 } },  
	{ 261, { "EH", 261 } },  
	{ 262, { "  ", 260 } },  
	{ 299, { "  ", 9991 } }, 
	{ 300, { "  ", 9990 } }, 
	{ 303, { "  ", 9990 } }, 
	{ 304, { "  ", 9990 } }, 
	{ 310, { "MP", 318 } },  
	{ 311, { "FM", 318 } },  
	{ 313, { "BE", 313 } },  
	{ 314, { "BM", 314 } },  
	{ 315, { "ST", 315 } },  
	{ 316, { "RM", 316 } },  
	{ 317, { "SV", 317 } },  
	{ 318, { "SM", 318 } },  
	{ 319, { "MM", 313 } },  
	{ 320, { "  ", 318 } },  
	{ 322, { "  ", 313 } },  
	{ 323, { "CM", 318 } },  
	{ 330, { "BU", 330 } },  
	{ 331, { "OB", 330 } },  
	{ 332, { "YY", 332 } },  
	{ 334, { "  ", 330 } },  
	{ 336, { "  ", 9990 } }, 
	{ 337, { "  ", 9990 } }, 
	{ 341, { "AI", 341 } },  
	{ 345, { "  ", 9990 } }, 
	{ 350, { "  ", 9990 } }, 
	{ 355, { "  ", 9990 } }, 
	{ 356, { "SE", 356 } },  
	{ 357, { "  ", 356 } },  
	{ 358, { "  ", 356 } },  
	{ 367, { "  ", 9990 } }, 
	{ 370, { "BB", 371 } },  
	{ 371, { "YB", 371 } },  
	{ 372, { "SB", 372 } },  
	{ 373, { "RB", 373 } },  
	{ 374, { "WR", 374 } },  
	{ 375, { "PB", 375 } },  
	{ 377, { "  ", 373 } },  
	{ 379, { "GB", 379 } },  
	{ 391, { "AH", 391 } },  
	{ 400, { "HI", 400 } },  
	{ 401, { "WH", 400 } },  
	{ 402, { "BH", 400 } },  
	{ 403, { "PH", 403 } },  
	{ 404, { "PE", 400 } },  
	{ 405, { "SL", 405 } },  
	{ 406, { "  ", 400 } },  
	{ 407, { "SH", 407 } },  
	{ 408, { "BI", 400 } },  
	{ 409, { "MH", 409 } },  
	{ 410, { "  ", 400 } },  
	{ 411, { "  ", 400 } },  
	{ 412, { "  ", 400 } },  
	{ 413, { "  ", 400 } },  
	{ 420, { "  ", 9990 } }, 
	{ 421, { "AC", 9990 } }, 
	{ 422, { "  ", 9990 } }, 
	{ 423, { "  ", 9990 } }, 
	{ 424, { "  ", 9990 } }, 
	{ 450, { "CA", 9990 } }, 
	{ 451, { "  ", 9990 } }, 
	{ 452, { "  ", 9990 } }, 
	{ 460, { "HB", 462 } },  
	{ 461, { "SG", 462 } },  
	{ 462, { "HK", 462 } },  
	{ 463, { "  ", 462 } },  
	{ 471, { "RD", 9990 } }, 
	{ 481, { "  ", 9990 } }, 
	{ 490, { "  ", 491 } },  
	{ 491, { "DW", 491 } },  
	{ 500, { "HT", 500 } },  
	{ 501, { "  ", 500 } },  
	{ 502, { "  ", 500 } },  
	{ 503, { "  ", 500 } },  
	{ 504, { "  ", 500 } },  
	{ 505, { "  ", 500 } },  
	{ 506, { "  ", 500 } },  
	{ 507, { "  ", 500 } },  
	{ 508, { "  ", 500 } },  
	{ 509, { "  ", 500 } },  
	{ 510, { "  ", 9990 } }, 
	{ 512, { "  ", 9990 } }, 
	{ 513, { "  ", 9990 } }, 
	{ 520, { "  ", 521 } },  
	{ 521, { "PS", 521 } },  
	{ 522, { "  ", 521 } },  
	{ 531, { "AB", 531 } },  
	{ 540, { "AS", 540 } },  
	{ 541, { "WA", 541 } },  
	{ 543, { "BA", 543 } },  
	{ 544, { "GA", 544 } },  
	{ 545, { "PA", 545 } },  
	{ 546, { "UA", 540 } },  
	{ 547, { "  ", 540 } },  
	{ 548, { "  ", 540 } },  
	{ 549, { "  ", 540 } },  
	{ 550, { "  ", 901 } },  
	{ 551, { "  ", 901 } },  
	{ 552, { "HL", 901 } },  
	{ 555, { "LB", 9990 } }, 
	{ 561, { "  ", 9990 } }, 
	{ 571, { "KC", 9990 } }, 
	{ 580, { "HA", 9990 } }, 
	{ 581, { "  ", 9990 } }, 
	{ 582, { "  ", 9990 } }, 
	{ 591, { "HY", 591 } },  
	{ 600, { "  ", 602 } },  
	{ 601, { "BN", 601 } },  
	{ 602, { "WN", 602 } },  
	{ 605, { "  ", 602 } },  
	{ 606, { "  ", 602 } },  
	{ 611, { "SU", 611 } },  
	{ 621, { "YP", 621 } },  
	{ 641, { "OO", 641 } },  
	{ 650, { "MG", 650 } },  
	{ 651, { "CT", 651 } },  
	{ 652, { "MS", 650 } },  
	{ 653, { "MV", 653 } },  
	{ 654, { "ML", 651 } },  
	{ 655, { "  ", 650 } },  
	{ 657, { "  ", 650 } },  
	{ 658, { "  ", 650 } },  
	{ 660, { "AP", 660 } },  
	{ 662, { "  ", 660 } },  
	{ 664, { "  ", 660 } },  
	{ 680, { "MB", 9990 } }, 
	{ 681, { "WM", 9990 } }, 
	{ 682, { "RY", 9990 } }, 
	{ 683, { "  ", 9990 } }, 
	{ 684, { "  ", 9990 } }, 
	{ 690, { "TL", 693 } },  
	{ 691, { "WT", 691 } },  
	{ 692, { "OG", 691 } },  
	{ 693, { "BG", 693 } },  
	{ 694, { "TS", 693 } },  
	{ 701, { "HH", 701 } },  
	{ 711, { "SD", 711 } },  
	{ 712, { "PW", 712 } },  
	{ 720, { "  ", 9990 } }, 
	{ 721, { "RA", 9990 } }, 
	{ 722, { "  ", 9990 } }, 
	{ 729, { "  ", 731 } },  
	{ 731, { "SY", 731 } },  
	{ 740, { "CW", 742 } },  
	{ 741, { "BP", 741 } },  
	{ 742, { "EC", 742 } },  
	{ 743, { "BT", 743 } },  
	{ 744, { "PY", 744 } },  
	{ 745, { "  ", 742 } },  
	{ 746, { "QA", 746 } },  
	{ 748, { "  ", 742 } },  
	{ 749, { "  ", 742 } },  
	{ 752, { "  ", 741 } },  
	{ 753, { "  ", 741 } },  
	{ 755, { "  ", 9990 } }, 
	{ 756, { "  ", 9990 } }, 
	{ 758, { "  ", 9990 } }, 
	{ 760, { "PL", 760 } },  
	{ 761, { "PR", 761 } },  
	{ 762, { "BC", 762 } },  
	{ 763, { "CC", 761 } },  
	{ 764, { "  ", 760 } },  
	{ 765, { "  ", 760 } },  
	{ 766, { "  ", 760 } },  
	{ 769, { "  ", 760 } },  
	{ 770, { "  ", 760 } },  
	{ 771, { "  ", 761 } },  
	{ 772, { "  ", 761 } },  
	{ 773, { "  ", 760 } },  
	{ 774, { "  ", 760 } },  
	{ 800, { "OK", 800 } },  
	{ 802, { "WO", 802 } },  
	{ 803, { "  ", 800 } },  
	{ 804, { "SW", 804 } },  
	{ 806, { "SO", 806 } },  
	{ 808, { "  ", 835 } },  
	{ 809, { "NP", 830 } },  
	{ 810, { "  ", 800 } },  
	{ 812, { "SK", 812 } },  
	{ 813, { "CB", 813 } },  
	{ 814, { "  ", 800 } },  
	{ 816, { "  ", 800 } },  
	{ 817, { "QI", 817 } },  
	{ 819, { "TO", 800 } },  
	{ 820, { "LK", 827 } },  
	{ 822, { "OV", 800 } },  
	{ 823, { "BR", 823 } },  
	{ 824, { "BJ", 800 } },  
	{ 825, { "SN", 825 } },  
	{ 826, { "CK", 826 } },  
	{ 827, { "WK", 827 } },  
	{ 828, { "NK", 800 } },  
	{ 829, { "  ", 800 } },  
	{ 830, { "PN", 830 } },  
	{ 831, { "WL", 831 } },  
	{ 832, { "CO", 832 } },  
	{ 833, { "RO", 833 } },  
	{ 834, { "QS", 812 } },  
	{ 835, { "PO", 835 } },  
	{ 836, { "DO", 835 } },  
	{ 837, { "BO", 837 } },  
	{ 838, { "LO", 800 } },  
	{ 840, { "DP", 835 } },  
	{ 841, { "  ", 800 } },  
	{ 842, { "QN", 800 } },  
	{ 844, { "  ", 800 } },  
	{ 845, { "  ", 800 } },  
	{ 854, { "  ", 9990 } }, 
	{ 901, { "BK", 901 } },  
	{ 920, { "WI", 922 } },  
	{ 921, { "  ", 922 } },  
	{ 922, { "BL", 922 } },  
	{ 923, { "DM", 922 } },  
	{ 925, { "  ", 922 } },  
	{ 926, { "  ", 922 } },  
	{ 927, { "  ", 922 } },  
	{ 929, { "  ", 922 } },  
	{ 931, { "SS", 931 } },  
	{ 934, { "  ", 9990 } }, 
	{ 935, { "MA", 9990 } }, 
	{ 936, { "  ", 9990 } }, 
	{ 937, { "  ", 9990 } }, 
	{ 950, { "BD", 951 } },  
	{ 951, { "BW", 951 } },  
	{ 952, { "WB", 951 } },  
	{ 953, { "  ", 951 } },  
	{ 970, { "EL", 970 } },  
	{ 971, { "WE", 970 } },  
	{ 972, { "AE", 972 } },  
	{ 973, { "  ", 970 } },  
	{ 974, { "SI", 970 } },  
	{ 975, { "RL", 975 } },  
	{ 976, { "  ", 970 } },  
	{ 977, { "RE", 970 } },  
	{ 986, { "  ", 9990 } }, 
	{ 987, { "  ", 9990 } }, 
	{ 988, { "  ", 9990 } }, 
	{ 992, { "  ", 9990 } }, 
	{ 993, { "  ", 9990 } }, 
	{ 996, { "  ", 9990 } }, 
	{ 997, { "  ", 9990 } }, 
	{ 998, { "  ", 9990 } }, 
	{ 999, { "  ", 9990 } }, 
	{ 9990, { "OH", 9990 } },
	{ 9991, { "OS", 9991 } }
}};

// get FIA species common name
const std::string get_common_name( int fia_species )
{
	try {
		auto common_name = species_map.at( fia_species ).common_name;
		return common_name;
	} catch( ... ) {
		std::cerr << "Exception: Unknown FIA species code: " << fia_species << "\n";
		throw; 		// need to refine exceptions
	}
}

// get FIA species parameter table index
const int get_species_index( int fia_species )
{
	try {
		auto index = species_map.at( fia_species ).spp_index;
		return index;
	} catch( ... ) {
		std::cerr << "Exception: Unknown FIA species code: " << fia_species << "\n";
		throw; 		// need to refine exceptions
	}
}

// Species Attributes
const std::array<SPECIES_ATTRIB,71> species_attrib = {{
/* "AB" */	{ 0.64, 0.56,4.75, 1.5, 1.5},      
/* "AE" */	{ 0.0, 0.0,0.0, 0.0, 0.0},        
/* "AH" */	{ 0.0, 0.0,0.0, 0.0, 0.0},      
/* "AI" */	{ 0.0, 0.0,0.0, 0.0, 0.0},             
/* "AL" */	{ 0.0, 0.0,0.0, 0.0, 0.0},         
/* "AP" */	{ 0.0, 0.0,0.0, 0.0, 0.0},        
/* "AW" */	{ 0.0, 0.0,0.0, 0.0, 0.0},      
/* "BA" */	{ 0.5, 0.45,2.96, 2, 3.5},        
/* "BC" */	{ 0.5, 0.47,2.46, 3.02, 1.06},     
/* "BE" */	{ 0.0, 0.0,0.0, 0.0, 0.0},       
/* "BF" */	{ 0.35, 0.33,5.01, 1, 2},       
/* "BH" */	{ 0.0, 0.0,0.0, 0.0, 0.0},             
/* "BN" */	{ 0.0, 0.0,0.0, 0.0, 0.0},         
/* "BO" */	{ 0.0, 0.0,0.0, 0.0, 0.0},        
/* "BP" */	{ 0.34, 0.31,1.27, 1.77, 2.63}, 
/* "BR" */	{ 0.0, 0.0,0.0, 0.0, 0.0},             
/* "BS" */	{ 0.46, 0.38,4.08, 2, 2},         
/* "BT" */	{ 0.39, 0.36,1.21, 2.5, 2},    
/* "BW" */	{ 0.0, 0.0,0.0, 0.0, 0.0},      
/* "CC" */	{ 0.0, 0.0,0.0, 0.0, 0.0},             
/* "DW" */	{ 0.0, 0.0,0.0, 0.0, 0.0},        
/* "EC" */	{ 0.4, 0.37,1.76, 1.57, 3.03},   
/* "EH" */	{ 0.4, 0.38,4.83, 1, 1.25},    
/* "GA" */	{ 0.56, 0.53,3.11, 3.85, 2.98},   
/* "GB" */	{ 0.48, 0.45,1.5, 2.34, 1},       
/* "HH" */	{ 0.78, 0.63,4.58, 3.25, 1.07},  
/* "HT" */	{ 0.0, 0.0,0.0, 0.0, 0.0},     
/* "JP" */	{ 0.43, 0.4,1.36, 4, 1},          
/* "MA" */	{ 0.0, 0.0,0.0, 0.0, 0.0},        
/* "MM" */	{ 0.0, 0.0,0.0, 0.0, 0.0},        
/* "NM" */	{ 0.0, 0.0,0.0, 0.0, 0.0},      
/* "NS" */	{ 0.43, 0.37023,4.45, 1.75, 1.22},
/* "PB" */	{ 0.55, 0.48,1.54, 2.02, 1.25},   
/* "PP" */	{ 0.0, 0.0,0.0, 0.0, 0.0},      
/* "PR" */	{ 0.38, 0.36,2.26, 0, 0},      
/* "PY" */	{ 0.0, 0.0,0.0, 0.0, 0.0},             
/* "QA" */	{ 0.38, 0.35,1.21, 1.77, 1.77},   
/* "RM" */	{ 0.54, 0.49,3.44, 1.84, 3.08},  
/* "RN" */	{ 0.46, 0.41,1.89, 3, 1},      
/* "RO" */	{ 0.63, 0.56,2.75, 2.88, 1.12},    
/* "RS" */	{ 0.4, 0.37,4.39, 2.5, 2},       
/* "SB" */	{ 0.65, 0.6,2.58, 3, 1},        
/* "SC" */	{ 0.0, 0.0,0.0, 0.0, 0.0},             
/* "SE" */	{ 0.0, 0.0,0.0, 0.0, 0.0},        
/* "SH" */	{ 0.0, 0.0,0.0, 0.0, 0.0},       
/* "SM" */	{ 0.63, 0.56,4.76, 2.25, 1.09}, 
/* "SO" */	{ 0.0, 0.0,0.0, 0.0, 0.0},             
/* "ST" */	{ 0.46, 0.44,3.56, 2, 1},         
/* "SV" */	{ 0.0, 0.0,0.0, 0.0, 0.0},        
/* "SW" */	{ 0.0, 0.0,0.0, 0.0, 0.0},      
/* "SY" */	{ 0.0, 0.0,0.0, 0.0, 0.0},             
/* "TA" */	{ 0.53, 0.49,0.98, 2, 3},         
/* "TM" */	{ 0.0, 0.0,0.0, 0.0, 0.0},        
/* "WA" */	{ 0.6, 0.55,2.46, 2.38, 2.59},  
/* "WC" */	{ 0.31, 0.29,3.45, 2.71, 1.46},   
/* "WI" */	{ 0.0, 0.0,0.0, 0.0, 0.0},         
/* "WO" */	{ 0.0, 0.0,0.0, 0.0, 0.0},       
/* "WP" */	{ 0.35, 0.34,3.21, 2.29, 1.03}, 
/* "WS" */	{ 0.4, 0.33,4.15, 2.88, 1.02},    
/* "YB" */	{ 0.62, 0.55,3.17, 3, 2},          
/* "YP" */	{ 0.0, 0.0,0.0, 0.0, 0.0},        
/* "99" */	{ 0.3, 0.3,3, 0, 0},            
/* "OH" */	{ 0.5121, 0,2.29, 0, 0},          
/* "OS" */	{ 0.445, 0,2.27, 0, 0},            
/* "RB" */	{ 0.62, 0.49,1.45, 1.53, 2.85},   
/* "AS" */	{ 0.0, 0.0,0.0, 0.0, 0.0},       
/* "BL" */	{ 0.0, 0.0,0.0, 0.0, 0.0},
/* "RP" */	{ 0.0, 0.0,0.0, 0.0, 0.0},       
/* "WK" */	{ 0.0, 0.0,0.0, 0.0, 0.0},       
/* "WL" */	{ 0.0, 0.0,0.0, 0.0, 0.0},       
/* "EL" */	{ 0.0, 0.0,0.0, 0.0, 0.0},
}};

// Get Species attributes for a species index
SPECIES_ATTRIB const *get_species_attrib( int species_index )
{
	// if there are no attributes for the species, use default
	if( species_attrib[species_index].sg != 0.0 )
		return &species_attrib[species_index];
	else
	{
		return &species_attrib[get_species_index(999)]; 
	}
}

// maximum crown width equation parameters
const std::array<CROWN_PARMS,71> mcw_parms = {{
/* "AB" */	{ 2.93,  0.434 },
/* "AE" */	{ 0.00,  0.000 },
/* "AH" */	{ 0.00,  0.000 },
/* "AI" */	{ 0.00,  0.000 },
/* "AL" */	{ 0.00,  0.000 },
/* "AP" */	{ 0.00,  0.000 },
/* "AW" */	{ 0.00,  0.000 },
/* "BA" */	{ 0.00,  0.000 },
/* "BC" */	{ 0.00,  0.000 },
/* "BE" */	{ 0.00,  0.000 },
/* "BF" */	{ 1.37,  0.572 },
/* "BH" */	{ 0.00,  0.000 },
/* "BN" */	{ 0.00,  0.000 },
/* "BO" */	{ 0.00,  0.000 },
/* "BP" */	{ 0.00,  0.000 },
/* "BR" */	{ 0.00,  0.000 },
/* "BS" */	{ 0.535, 0.742 },
/* "BT" */	{ 0.00,  0.000 },
/* "BW" */	{ 0.00,  0.000 },
/* "CC" */	{ 0.00,  0.000 },
/* "DW" */	{ 0.00,  0.000 },
/* "EC" */	{ 0.00,  0.000 },
/* "EH" */	{ 2.44,  0.408 },
/* "GA" */	{ 0.00,  0.000 },
/* "GB" */	{ 2.24,  0.382 },
/* "HH" */	{ 0.00,  0.000 },
/* "HT" */	{ 0.00,  0.000 },
/* "JP" */	{ 0.00,  0.000 },
/* "MA" */	{ 0.00,  0.000 },
/* "MM" */	{ 0.00,  0.000 },
/* "NM" */	{ 0.00,  0.000 },
/* "NS" */	{ 0.00,  0.000 },
/* "PB" */	{ 1.48,  0.623 },
/* "PP" */	{ 0.00,  0.000 },
/* "PR" */	{ 0.00,  0.000 },
/* "PY" */	{ 0.00,  0.000 },
/* "QA" */	{ 1.31,  0.586 },
/* "RM" */	{ 2.17,  0.491 },
/* "RN" */	{ 0.00,  0.000 },
/* "RO" */	{ 4.08,  0.310 },
/* "RS" */	{ 1.80,  0.461 },
/* "SB" */	{ 0.00,  0.000 },
/* "SC" */	{ 0.00,  0.000 },
/* "SE" */	{ 0.00,  0.000 },
/* "SH" */	{ 0.00,  0.000 },
/* "SM" */	{ 3.31,  0.356 },
/* "SO" */	{ 0.00,  0.000 },
/* "ST" */	{ 0.00,  0.000 },
/* "SV" */	{ 0.00,  0.000 },
/* "SW" */	{ 0.00,  0.000 },
/* "SY" */	{ 0.00,  0.000 },
/* "TA" */	{ 0.00,  0.000 },
/* "TM" */	{ 0.00,  0.000 },
/* "WA" */	{ 0.00,  0.000 },
/* "WC" */	{ 0.00,  0.000 },
/* "WI" */	{ 0.00,  0.000 },
/* "WO" */	{ 0.00,  0.000 },
/* "WP" */	{ 1.24,  0.585 },
/* "WS" */	{ 1.50,  0.496 },
/* "YB" */	{ 4.04,  0.308 },
/* "YP" */	{ 0.00,  0.000 },
/* "99" */	{ 2.24262, 0.462653333 },
/* "OH" */	{ 4.04,  0.308 },
/* "OS" */	{ 1.597128571, 0.513957143 },
/* "RB" */	{ 2.24,  0.382 },
/* "AS" */	{ 0.00,  0.000 },
/* "BL" */	{ 0.00,  0.000 },
/* "RP" */	{ 0.00,  0.000 },
/* "WK" */	{ 0.00,  0.000 },
/* "WL" */	{ 0.00,  0.000 },
/* "EL" */	{ 0.00,  0.000 },
}};

// largest crown width equation parameters
const std::array<CROWN_PARMS,71> lcw_parms = {{
/* "AB" */	{ 1.00,  0.194 },
/* "AE" */	{ 0.00,  0.000 },
/* "AH" */	{ 0.00,  0.000 },
/* "AI" */	{ 0.00,  0.000 },
/* "AL" */	{ 0.00,  0.000 },
/* "AP" */	{ 0.00,  0.000 },
/* "AW" */	{ 0.00,  0.000 },
/* "BA" */	{ 0.00,  0.000 },
/* "BC" */	{ 0.00,  0.000 },
/* "BE" */	{ 0.00,  0.000 },
/* "BF" */	{ 1.49,  0.105 },
/* "BH" */	{ 0.00,  0.000 },
/* "BN" */	{ 0.00,  0.000 },
/* "BO" */	{ 0.00,  0.000 },
/* "BP" */	{ 0.00,  0.000 },
/* "BR" */	{ 0.00,  0.000 },
/* "BS" */	{ 1.00,  0.174 },
/* "BT" */	{ 0.00,  0.000 },
/* "BW" */	{ 0.00,  0.000 },
/* "CC" */	{ 0.00,  0.000 },
/* "DW" */	{ 0.00,  0.000 },
/* "EC" */	{ 0.00,  0.000 },
/* "EH" */	{ 1.90, -0.057 },
/* "GA" */	{ 0.00,  0.000 },
/* "GB" */	{ 3.10, -0.214 },
/* "HH" */	{ 0.00,  0.000 },
/* "HT" */	{ 0.00,  0.000 },
/* "JP" */	{ 0.00,  0.000 },
/* "MA" */	{ 0.00,  0.000 },
/* "MM" */	{ 0.00,  0.000 },
/* "NM" */	{ 0.00,  0.000 },
/* "NS" */	{ 0.00,  0.000 },
/* "PB" */	{ 2.10, -0.035 },
/* "PP" */	{ 0.00,  0.000 },
/* "PR" */	{ 0.00,  0.000 },
/* "PY" */	{ 0.00,  0.000 },
/* "QA" */	{ 2.65,  0.157 },
/* "RM" */	{ 2.63, -0.132 },
/* "RN" */	{ 0.00,  0.000 },
/* "RO" */	{ 4.10, -0.272 },
/* "RS" */	{ 4.33, -0.264 },
/* "SB" */	{ 0.00,  0.000 },
/* "SC" */	{ 0.00,  0.000 },
/* "SE" */	{ 0.00,  0.000 },
/* "SH" */	{ 0.00,  0.000 },
/* "SM" */	{ 1.00,  0.161 },
/* "SO" */	{ 0.00,  0.000 },
/* "ST" */	{ 0.00,  0.000 },
/* "SV" */	{ 0.00,  0.000 },
/* "SW" */	{ 0.00,  0.000 },
/* "SY" */	{ 0.00,  0.000 },
/* "TA" */	{ 0.00,  0.000 },
/* "TM" */	{ 0.00,  0.000 },
/* "WA" */	{ 0.00,  0.000 },
/* "WC" */	{ 0.00,  0.000 },
/* "WI" */	{ 0.00,  0.000 },
/* "WO" */	{ 0.00,  0.000 },
/* "WP" */	{ 1.00,  0.147 },
/* "WS" */	{ 2.09, -0.069 },
/* "YB" */	{ 4.23, -0.264 },
/* "YP" */	{ 0.00,  0.000 },
/* "99" */	{ 2.79282, -0.090113333 },
/* "OH" */	{ 2.65,  0.157 },
/* "OS" */	{ 2.3276, 0.027842857 },
/* "RB" */	{ 3.10, -0.214 },
/* "AS" */	{ 0.00,  0.000 },
/* "BL" */	{ 0.00,  0.000 },
/* "RP" */	{ 0.00,  0.000 },
/* "WK" */	{ 0.00,  0.000 },
/* "WL" */	{ 0.00,  0.000 },
/* "EL" */	{ 0.00,  0.000 },
}};

// alternative height prediction parameter estimates
const std::unordered_map<int, std::array<double,6>> htpred_parms = {{
	{ 12, { 5.13103388765698,  -0.688006078693257,  0.0435566963752983, 1.17203543266571,  0.00295626058916313, 0.756891203721211 }}, // BF" 
	{ 97, { 13.3578869887873,  -0.617050971635656,  0.0425797723397918, 1.45591845048526,  0.00508272288829603, 0.33137877089764 }}, // RS"  
	{ 316, { 5.73708174912572, -0.602268760730604,  0.0552172089078516, 1.17789129199006,  0.00814030745900718, 0.69301640872115 }}, // RM" 
	{ 95, { 15.6867204188952,  -2.51500585669418,   0.0879415068301041, 2.13721765852964,  0.0105556400948463,  0.0948864026051222 }}, // BS"  
	{ 94, { 9.29959064518376,  -0.697624563652873,  0.0334513155042432, 1.42110742405038,  0.00392259857263223, 0.627308053905718 }}, // WS" 
	{ 375, { 6.66280665334394, -0.20943441553474,   0.0570105527707945, 1.28244534506059,  0.00705402232229192, 0.604939975303091 }}, // PB" 
	{ 318, { 14.2427200278098, -0.940084909032671,  0.0537605518622074, 1.24479469148506,  0.00988505673975092, 0.222756885404623 }}, // SM"
	{ 371, { 7.99010135625622, -0.908456555086515,  0.0544340194354197, 1.07905357519485,  0.00608217229925025, 0.457073610927329 }}, // YB"
	{ 129, { 13.3767635152781, -1.03141360978021,   0.0386871000465069, 1.62544321308618,  0.00846213864316395, 0.392284578973453 }}, // WP" 
	{ 261, { 18.8917384003433, -0.963833021442156,  0.032530628353055,  1.41162459767543,  0.00455821660512667, 0.166457877936262 }}, // EH" 
	{ 241, { 13.5184151528964,  0.000000000000000,  0.0562738918055249, 1.56995482610454,  0.00340777917951033, 0.109452415802276 }}, // WC"                 
	{ 531, { 21.8481795233992, -4.7113293538244,    0.0297698212634849, 1.03526150424694,  0.00318681680520628, 0.0905116378070188 }}, // AB" 
	{ 746, { 13.8245098927135, -1.61744579374818,   0.0482408488343778, 1.05131635399733,  0.00572779126626193, 0.315630015074108 }}, // QA" 
	{ 71, { 10.1195602028343,  -1.75487564867513,   0.0655958334669066, 1.78889526898414,  0.0126045279235523,  0.477323792797264 }}, // TA"   
	{ 833, { 7.68950926654646, -1.65487459731696,   0.0581871967233407, 1.21626245036355,  0.00462634361302283, 0.573310802521561 }}, // RO" 
	{ 743, { 11.2541396319363, -1.66984309067053,   0.0232875406897833, 0.805161034852052, 0.0032736976351675,  0.569121927908794 }}, // BT" 
	{ 541, { 14.5652282270858, -1.749432663031,     0.044460273802868,  1.16747368410921,  0.00792067115526519, 0.309098980554723 }}, // WA"    
	{ 379, { 9.01378813537494, -0.350925671843727,  0.0648629503344603, 1.19164032832071,  0.00659710795727399, 0.396040553598413 }}, // GB"
	{ 9991, { 15.7031058651812, -0.90069546388912,  0.0298852037695118, 1.1769501063274,   0.00273252208502503, 0.29567460374915 }}, // OC"  
	{ 9990, { 8.2287325111908,  -0.923930754010703, 0.051426291005335,  1.08642637430746,  0.00637283401953168, 0.504667607176395 }}, // OH"
}};


// height growth equation parameters
const std::unordered_map<int,std::array<double,6>> dht_parms = {{
	{ 97, { 35.2134146341463, 0.00265440900132835, 0.640007699125201, 0.279584866379778, 0, 0.0446836915195239 }}, // RS"  
	{ 95, { 25.609756097561, 0.00393410439479273, 0.883019975890745, 0.193674412452332, 0, 0.106161254727306 }}, // BS"    
	{ 261, { 35.0609756097561, 0.0191705124755719, 0.984422419354126, 0.225447961906396, 0, 1.31669780715767 }}, // EH"    
	{ 241, { 31.4024390243902, 0.00166700913165704, 0.572537585986857, 0.125027778656062, 0, 0.0407152305604337 }}, // WC" 
	{ 71, { 26.0670731707317, 0.0141696434197194, 1.55665400277669, 0.34449248988554, 0, 0 }}, // TA"                      
	{ 9991, { 31.745535449645, 0.00867087525749445, 1.06336816504264, 0.277402622776157, 0, 0.166017748340213 }}, // OC"   
	{ 12, { 30.1829268292683, 0.0237654049813361, 1.73098716069569, 0.339623639884266, 0, 0.43 }}, // BF"                  
	{ 94, { 30.9451219512195, 0.0113414639077187, 0.95944525254419, 0.261278227989248, 0, 0.43 }}, // WS"                  
	{ 129, { 39.6, 0.00867087525749445, 1.06336816504264, 0.277402622776157, 0, 0.166017748340213 }}, // WP"               
	{ 531, { 40.1106118484808, 0.00855482889014767, 0.980564693882345, 0, 0.0576519701101695, 0.781569780607644 }}, // AB" 
	{ 743, { 40.8364649965974, 0.00855482889014767, 0.980564693882345, 0, 0.00769896290770786, 0.500177945938084 }}, // BT"
	{ 379, { 23.1351061015522, 0.00855482889014767, 0.980564693882345, 0, 0.0455225683582262, 0.204232065341852 }}, // GB" 
	{ 375, { 33.6958799233975, 0.00855482889014767, 0.980564693882345, 0, 0.0405946719141004, 0.646533561489927 }}, // PB" 
	{ 746, { 37.1519779578078, 0.00855482889014767, 0.980564693882345, 0, 0.00924667351011503, 0.284061859908224 }}, // QA"
	{ 318, { 38.141750181211, 0.00855482889014767, 0.980564693882345, 0, 0.0405046621294649, 0.574454038087747 }}, // SM"  
	{ 541, { 46.8962927580116, 0.00855482889014767, 0.980564693882345, 0, 0.0336856196237608, 0.760817266601299 }}, // WA" 
	{ 371, { 30.4564769951054, 0.00855482889014767, 0.980564693882345, 0, 0.0185187935247999, 0.491813988183384 }}, // YB" 
	{ 316, { 34.9623963440023, 0.00814914087348503, 1.03203158060361, 0, 0, 0.685518119184491 }}, // RM"                   
	{ 833, { 41.5611264184893, 0.00814914087348503, 1.03203158060361, 0, 0, 0.752260481201687 }}, // RO"                   
	{ 9990, { 35.4104657149971, 0.00855482889014767, 0.980564693882345, 0, 0.0164148963359421, 0.624565539297164 }}, // OH"
}};

// hcb prediction equation parameters (random effects)
const std::array<double,71> hcb_parms = {
/* "AB" */	-0.218384027,
/* "AE" */	 0.0,
/* "AH" */	 0.0,
/* "AI" */	 0.081713772,
/* "AL" */	 0.0,  
/* "AP" */	 0.177509753,
/* "AW" */	 0.0, 
/* "BA" */	 0.112652176,
/* "BC" */	-0.198822609,         
/* "BE" */	 0.0,  
/* "BF" */	 0.093585699,
/* "BH" */	 0.0,         
/* "BN" */	 0.0,         
/* "BO" */	 0.0,
/* "BP" */	-0.136722421,
/* "BR" */	 0.015598341,
/* "BS" */	-0.227771445,  
/* "BT" */	 0.010040571,         
/* "BW" */	 0.0,          
/* "CC" */	 0.0,
/* "DW" */	 0.0,
/* "EC" */	 0.507259999, 
/* "EH" */	 0.403937729,          
/* "GA" */	 0.0, 
/* "GB" */	-0.181632328,
/* "HH" */	 0.0,
/* "HT" */	 0.0, 
/* "JP" */	-0.270782917,
/* "MA" */	 0.0, 
/* "MM" */	 0.0, 
/* "NM" */	 0.0,
/* "NS" */	 0.955552766, 
/* "PB" */	-0.180946077,         
/* "PP" */	 0.0, 
/* "PR" */	-0.270887959,
/* "PY" */	 0.0,
/* "QA" */	 0.060833757,
/* "RM" */	-0.202478201, 
/* "RN" */	-0.150518738, 
/* "RO" */	-0.370217330,
/* "RS" */	-0.121308265,
/* "SB" */	 0.0,  
/* "SC" */	 0.244204218, 
/* "SE" */	 0.243022150,         
/* "SH" */	 0.0, 
/* "SM" */	-0.163824260,
/* "SO" */	 0.0,          
/* "ST" */	 0.0,          
/* "SV" */	 0.0,          
/* "SW" */	 0.0, 
/* "SY" */	 0.0
/* "TA" */	-0.304007105,         
/* "TM" */	 0.0,
/* "WA" */	-0.148338171, 
/* "WC" */	 0.419622685,  
/* "WI" */	 0.0,
/* "WO" */	 0.167213142, 
/* "WP" */	-0.146685117,  
/* "WS" */	 0.100275538,  
/* "YB" */	 0.003235064, 
/* "YP" */	 0.0,
/* "99" */	 0.0,
/* "OH" */	-0.042894377,          
/* "OS" */	 0.0,          
/* "RB" */	 0.0,
/* "AS" */	 0.0,
/* "BL" */	 0.0,         
/* "RP" */	 0.0,         
/* "WK" */	 0.0,          
/* "WL" */	 0.0, 
/* "EL" */	 0.0,
};

// hcb prediction equation parameters (fixed effects)
const std::array<double,6> hcb_fixed_parms = {{ 0.29070, 0.00636, -0.02288, 0.08232, -0.03086, -0.01701 }};

// alternative dHCB equation parameters. G. Johnson 07/2024
const std::unordered_map<int,std::array<double,6>> dhcb_parms = {{
	{ 12, { 0.0791502495353311, 0.975197193924314, -0.439506716205814, 0.0025947818003865, 1.25466311558281, 7.97663196731615 }}, // BF  
	{ 97, { 0.0498006083386109, 0.975197193924314, -0.772130891971934, 0.0025947818003865, 1.25466311558281, 10.5594243495453 }}, // RS  
	{ 316, { 0.0526864887656573, 0.975197193924314, -1.20270302840498, 0.0025947818003865, 1.25466311558281, 9.65721854304636 }}, // RM  
	{ 95, { 0.0577257457169366, 0.975197193924314, -0.722836427191663, 0.0025947818003865, 1.25466311558281, 9.71764705882353 }}, // BS  
	{ 94, { 0.0735298936182091, 0.975197193924314, -0.491201783115483, 0.0025947818003865, 1.25466311558281, 8.32526877192982 }}, // WS  
	{ 375, { 0.0476873101808064, 0.975197193924314, -0.63413416002293, 0.0025947818003865, 1.25466311558281, 9.430944 }}, // PB          
	{ 318, { 0.0374392059700131, 0.975197193924314, -1.01130765183808, 0.0025947818003865, 1.25466311558281, 9.73758389261745 }}, // SM  
	{ 129, { 0.049513090136335, 0.975197193924314, -0.804865103303001, 0.0025947818003865, 1.25466311558281, 11.1340997435897 }}, // WP  
	{ 371, { 0.0395582474567802, 0.975197193924314, -1.19622478473684, 0.0025947818003865, 1.25466311558281, 8.34410256410256 }}, // YB  
	{ 9991, { 0.0682108837926553, 0.975197193924314, -0.413088067872158, 0.0025947818003865, 1.25466311558281, 9.65583335108744 }}, // OC
	{ 9990, { 0.0445169160823193, 0.975197193924314, -1.13705836597518, 0.0025947818003865, 1.25466311558281, 9.51571992818671 }}, // OH	
}};

// alternative dDBH parameters. G. Johnson 03/22/2024
const std::unordered_map<int,std::array<double,6>> ddbh_parms = {{
	// fia     b0                b1                  b2                    b3                 b4                   b5
	{ 9991, { -2.25982557235219, 0.11058259238289, -0.00437172819937776, 0.89985742849329, -0.0461434398378635, 0.571754276315739 }}, // OC  
	{ 9990, { -2.07209180235409, 0.0675099083904194, -0.00617269946005389, 0.635572080439518, -0.0624415168570274, 0.45837228460862 }}, // OH
	{ 12, { -2.14358570784222, 0.359302803944237, -0.0184790676772541, 1.00475158952891, -0.0410972715379064, 0.410491303784146 }}, // BF    
	{ 97, { -1.5602406637864, 0.102549089315097, -0.0114135568351638, 0.717730329920378, -0.0733104065744919, 0.370370142930847 }}, // RS    
	{ 316, { -2.07422692536809, 0.134496535222659, -0.00925081524229958, 0.670405541395712, -0.0443567627375624, 0.373133715314814 }}, // RM 
	{ 95, { -0.805852169175586, -0.15040268916668, 0.00218606033603311, 0.881858683516984, -0.032201713195802, 0.0 }}, // BS 
	{ 375, { -1.4992347708763, 0.00208481196557881, -0.0171509913709801, 0.762555068695894, -0.065614792737358, 0.333962630642476 }}, // PB  
	{ 94, { -1.38653733685511, 0.234761968066549, -0.0238776208816519, 0.848015757218232, -0.086147472357881, 0.288172030843415 }}, // WS    
	{ 241, { -2.19868715571537, 0.314136744622527, -0.00610038647648854, 0.887682005967591, -0.0189919513405593, 0.137521784647328 }}, // WC 
	{ 318, { -3.66404956537127, 0.665106976583784, -0.0335219906279964, 0.554420273345683, -0.0898102012342889, 0.635626279505659 }}, // SM  
	{ 371, { -1.07996704057407, 0.360976429365229, -0.0305255090975563, 0.672265735823198, -0.0667011745589074, 0.0 }}, // YB
	{ 261, { -1.11418833015564, -0.019309343964876, -0.00592810698129555, 0.75639718722572, -0.0634548531854092, 0.335753490531572 }}, // EH 
	{ 129, { -0.718088808452656, 0.285693217263764, -0.0221441329050537, 0.6376905686997, -0.0967223919254847, 0.164802362725512 }}, // WP   
	{ 746, { -1.68354054730281, 0.162748564401907, -0.00852123469406037, 0.362365131868558, -0.0925568398156899, 0.316037294800185 }}, // QA 
	{ 531, { -2.69197613761862, 0.35002094120726, -0.0361456936055827, 0.753995198449187, -0.0733271537656432, 0.654314609507152 }}, // AB
}};

//////////// Mortality Parameters ////////////
const std::unordered_map<int,std::array<double,5>> mort_parms = {{
	{  12, {-0.962618242460261,3.76098654737369,0.741476535774897,0,0 }},  
	{ 316, {-1.10166005632142,0.0937570006125872,2.45885780531611,0,0 }}, 
	{  97, {-1.02319528334032,6.95663159375224,0.299257960855281,0,0 }},   
	{  95, {-1.28322720789101,0.62247526933389,0.534173733105841,0,0 }},   
	{ 375, {-1.1304254821042,0.157570496243964,1.57847457039305,0,0 }},   
	{  94, {-0.946421324831884,5.15286099839063,0.368382595085918,0,0 }},  
	{ 318, {-1.32169276600779,0.0840536251796444,1.75176670008316,0,0 }}, 
	{ 371, {-1.28617581199331,0.00581812231203269,3.25885445825566,0,0 }},
	{ 241, {-1.08666273324107,4.69701937806041,0.62907149408889,0,0 }},   
	{ 746, {-0.687204182227276,0.0325129182487394,3.11715547462309,0,0 }},
	{ 129, {-1.17796095833535,0.046429725526019,1.63590739332823,0,0 }},  
	{ 261, {-0.760299264443081,12.1300822869441,0.728403389189399,0,0 }}, 
	{  71, {-1.06434719547627,0.0484539239134581,2.43230369572811,0,0 }},  
	{ 379, {-1.02142403478918,0.278937687832337,1.28915854086862,0,0 }},  
	{ 833, {-1.07876015017177,0.185825527743569,1.63270930850272,0,0 }},  
	{ 743, {-0.454593433678917,0.445558154849354,2.20747009501244,0,0 }}, 
	{ 541, {-1.26754678947443,0.00218501029553022,3.16043581407364,0,0 }},
	{ 105, {-0.587558590505599,0.73203078563984,1.22820332219182,0,0 }}, 
	{ 9991, {-1.0149316208627,3.84696038999283,0.623578691838131,0,0}},
	{ 9990, {-1.16178920607941,0.012780558009355,2.64477511606419,0,0}}
}};